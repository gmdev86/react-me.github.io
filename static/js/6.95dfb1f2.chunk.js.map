{"version":3,"sources":["components/MaskedInput/MaskedInput.js","views/Components/MaskedInput/index.js"],"names":["MaskedInput","props","handleChange","event","cleanValue","target","value","replace","checkOverflow","state","maxLength","onFieldChange","newLen","mask","split","filter","v","length","bind","substring","this","format","onChange","i","lastReplacedIndex","_","j","Component","index","setState","displayField","className"],"mappings":"sSAEqBA,E,YACjB,WAAYC,GAAO,IAAD,uBACd,4CAAMA,KAYVC,aAAe,SAACC,GAAW,IAEnBC,EADcD,EAAME,OAAhBC,MACeC,QAAQ,SAAU,IACzCH,EAAa,EAAKI,cAAcJ,EAAY,EAAKK,MAAMC,WACvD,EAAKT,MAAMU,cAAcP,IAdzB,IACIQ,EADSX,EAAMY,KAAKC,MAAM,IACVC,QAAO,SAACC,GAAD,MAAc,MAANA,KAAYC,OAJjC,OAMd,EAAKR,MAAQ,CACTC,UAAWE,GAGf,EAAKJ,cAAgB,EAAKA,cAAcU,KAAnB,gBAVP,E,2EAkCJZ,EAAOI,GACjB,OAAGJ,EAAMW,QAAUP,EACRJ,EAAMa,UAAU,EAAGT,GAEnBJ,I,+BAIL,IAAD,EACoBc,KAAKnB,MAAtBK,EADH,EACGA,MAAOO,EADV,EACUA,KACf,OACI,2BACIP,MAAON,EAAYqB,OAAOf,EAAOO,GACjCS,SAAUF,KAAKlB,kB,8BA3BZI,EAAOO,GAClB,IAAIU,EAAI,EACJC,GAAqB,EASzB,OARmBX,EAAKN,QAAQ,MAAM,SAACkB,EAAGC,GACtC,OAAGH,GAAKjB,EAAMW,OACH,KAEXO,EAAoBE,EACbpB,EAAMiB,SAGCJ,UAAU,EAAGK,EAAoB,O,GAhClBG,c,0JCCpBC,E,YACjB,WAAY3B,GAAO,IAAD,8BACd,4CAAMA,KAOVC,aAAe,SAACI,GACZ,EAAKuB,SAAS,CACVC,aAAcxB,KAPlB,EAAKG,MAAQ,CACTqB,aAAc,IAJJ,E,sEAed,OACE,6BACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YACb,6DACA,kBAAC,IAAD,CACElB,KAAK,gBACLP,MAAOc,KAAKX,MAAMqB,aAClBnB,cAAeS,KAAKlB,iBAI1B,yBAAK6B,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,gBAAgBX,KAAKX,MAAMqB,qB,GA9BvBH","file":"static/js/6.95dfb1f2.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class MaskedInput extends Component {\n    constructor(props){\n        super(props);\n\n        let newArr = props.mask.split('');\n        let newLen = newArr.filter((v) => (v === '#')).length;\n\n        this.state = {\n            maxLength: newLen\n        }\n\n        this.checkOverflow = this.checkOverflow.bind(this);\n    }\n\n    handleChange = (event) => {\n        const { value } = event.target;\n        let cleanValue = value.replace(/[^\\d]/g, '');\n        cleanValue = this.checkOverflow(cleanValue, this.state.maxLength);\n        this.props.onFieldChange(cleanValue);\n    }\n\n    static format( value, mask ) {\n        let i = 0;\n        let lastReplacedIndex = -1;\n        const filledMask = mask.replace(/#/g, (_, j) => {\n            if(i >= value.length){\n                return '#';\n            }\n            lastReplacedIndex = j;\n            return value[i++];\n        });\n\n        return filledMask.substring(0, lastReplacedIndex + 1);\n    }\n\n    checkOverflow(value, maxLength){\n        if(value.length >= maxLength){\n            return value.substring(0, maxLength);\n        } else {\n            return value;\n        }\n    }\n\n    render() {\n        const { value, mask  } = this.props;\n        return (\n            <input \n                value={MaskedInput.format(value, mask)}    \n                onChange={this.handleChange}\n            />\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport MaskedInput from '../../../components/MaskedInput/MaskedInput';\n\nexport default class index extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            displayField: \"\"\n        }\n    }\n\n    handleChange = (value) => {\n        this.setState({\n            displayField: value\n        });\n    }\n\n    render() {\n        return (\n          <div>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <label>Masked Input (###)###-####</label>\n                <MaskedInput\n                  mask=\"(###)###-####\"\n                  value={this.state.displayField}\n                  onFieldChange={this.handleChange}\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <div className=\"form-control\">{this.state.displayField}</div>\n              </div>\n            </div>\n          </div>\n        );\n    }\n}\n"],"sourceRoot":""}